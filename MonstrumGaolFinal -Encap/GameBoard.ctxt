#BlueJ class context
comment0.target=GameBoard
comment0.text=\r\n\ GameBoard\ world\ where\ everything\ happens\r\n\ \r\n\ @author\ James\ Plant\r\n\ @version\ 12/12/2024\r\n
comment1.params=
comment1.target=GameBoard()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ the\ GameBoard\r\n\ \r\n
comment10.params=
comment10.target=boolean\ isReadyToExitState()
comment11.params=readyToExitState
comment11.target=void\ setReadyToExitState(boolean)
comment12.params=
comment12.target=boolean\ isOnSafeSpaceSoRollAgain()
comment13.params=onSafeSpaceSoRollAgain
comment13.target=void\ setOnSafeSpaceSoRollAgain(boolean)
comment14.params=
comment14.target=boolean\ isButtonVisible()
comment15.params=buttonVisible
comment15.target=void\ setButtonVisible(boolean)
comment16.params=
comment16.target=boolean\ isTabletopVisible()
comment17.params=tabletopVisible
comment17.target=void\ setTabletopVisible(boolean)
comment18.params=
comment18.target=void\ prepare()
comment18.text=\r\n\ sets\ up\ objects\ on\ the\ board\r\n\ \r\n
comment19.params=
comment19.target=void\ act()
comment19.text=\r\n\ sets\ up\ game\ states\r\n\ \r\n
comment2.params=
comment2.target=int\ getPlayerScore()
comment2.text=\r\n\ getter\ and\ setter\ list\r\n\ \r\n
comment20.params=playerIndex
comment20.target=void\ determineDieRollValueForPlayerIndex(int)
comment20.text=\r\n\ Determines\ the\ die\ roll\ for\ the\ current\ player.\ If\ the\ player\ is\ human,\r\n\ then\ the\ human\ player\ clicks\ on\ the\ die\ object\ to\ roll\ the\ die;\ otherwise,\r\n\ the\ die\ is\ automatically\ rolled\ by\ the\ CPU.\r\n\ \r\n\ @param\ playerIndex\ \ the\ index\ of\ the\ player\ rolling\ the\ die\r\n
comment21.params=playerIndex
comment21.target=void\ determineWhichPiecesAreMoveableForPlayerIndex(int)
comment21.text=\r\n\ Routine\ for\ determining\ which\ heroes\ are\ moveable\r\n\ \r\n\ @param\ playerIndex\ \ \ index\ of\ the\ player\ whose\ turn\ is\ currently\ active\r\n
comment22.params=
comment22.target=void\ tabletopHelp()
comment22.text=\r\n\ this\ holds\ all\ the\ objects\ made\ for\ RPS\r\n\ \r\n
comment23.params=
comment23.target=void\ updateScoreBoard()
comment23.text=\r\n\ updates\ scoreboard\r\n\ \r\n
comment24.params=result
comment24.target=void\ setResult(java.lang.String)
comment24.text=\r\n\ score\ result\ keeper\r\n\ \r\n
comment25.params=
comment25.target=void\ updateBonusPoints()
comment25.text=\r\n\ bonus\ point\ keeper\r\n\ \r\n
comment26.params=
comment26.target=void\ removeTabletop()
comment26.text=\r\n\ removes\ tabletop\ when\ RPS\ is\ over\r\n\ \r\n
comment27.params=playerIndex
comment27.target=void\ determineMoveForPlayerIndex(int)
comment27.text=\r\n\ Determines\ which\ of\ the\ player's\ moveable\ pieces\ will\ actually\ be\ moved\r\n\ \r\n\ @param\ playerIndex\ \ \ the\ index\ of\ the\ player\ currently\ moving\ \r\n
comment28.params=playerIndex\ selectedPlayerPiece
comment28.target=void\ handleSelectedPieceForPlayerIndex(int,\ PlayerPiece)
comment28.text=\r\n\ Updates\ the\ given\ player\ piece's\ location\ index\ along\ the\ movement\ path\ for\ the\ given\ playerIndex\r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ player\ moving\ the\ selected\ piece\r\n\ @param\ selectedPlayerPiece\ \ \ a\ reference\ to\ the\ player's\ selected\ piece\r\n
comment29.params=playerIndex\ selectedPlayerPiece
comment29.target=void\ moveSelectedPieceOntoTargetSpaceForPlayerIndex(int,\ PlayerPiece)
comment29.text=\r\n\ "Helper"\ method\ (called\ by\ handleSelectedPieceForPlayerIndex)\ for\ moving\ a\r\n\ piece\ into\ a\ target\ space\ that\ is\ NOT\ the\ goal\r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ player\ moving\ a\ piece\ into\ the\ piece's\ target\ space\ \r\n\ @param\ selectedPlayerPiece\ \ \ a\ reference\ to\ the\ player's\ selected\ piece\r\n
comment3.params=score
comment3.target=void\ setPlayerScore(int)
comment30.params=playerIndex\ selectedPlayerPiece
comment30.target=void\ resetCapturedPieceOnBoardAndReplaceWithSelectedPieceForPlayerIndex(int,\ PlayerPiece)
comment30.text=\r\n\ "Helper"\ method\ (here\ called\ by\ `moveSelectedPieceOntoTargetSpaceForPlayerIndex`)\ \r\n\ for\ handling\ the\ capture\ of\ an\ opposing\ player's\ piece\ \r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ player\ moving\ a\ piece\ into\ that\ piece's\ target\ space\ \r\n\ @param\ selectedPlayerPiece\ \ \ a\ reference\ to\ the\ player's\ selected\ piece\r\n
comment31.params=playerIndex\ selectedPlayerPiece
comment31.target=void\ moveSelectedPieceIntoGoalZoneForPlayerIndex(int,\ PlayerPiece)
comment31.text=\r\n\ "Helper"\ method\ (here\ called\ by\ handleSelectedPieceForPlayerIndex)\ to\ move\ \r\n\ the\ selected\ playerPiece's\ SPRITE\ into\ the\ goal\ zone.\r\n\ Note\ that\ this\ only\ moves\ the\ player\ piece's\ SPRITE;\ the\ player\ piece's\ \r\n\ board\ location\ index\ is\ updated\ elsewhere\ (can\ you\ figure\ out\ where?)\r\n\ \r\n\ Actual\ X-\ and\ Y-coordinates\ of\ each\ player's\ piece\ in\ the\ goal\ zone\ are\ each\ \ \r\n\ computed\ as\ a\ linear\ function\ of\ how\ many\ of\ that\ player's\ pieces\ are\ already\ \r\n\ in\ the\ goal\ zone\ (i.e.,\ goalCountForPlayer[playerIndex]\ )\r\n\ \r\n\ @param\ playerIndex\ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ player\ moving\ a\ piece\ into\ the\ goal\ zone\r\n\ @param\ selectedPlayerPiece\ \ \ a\ reference\ to\ the\ player's\ selected\ piece\r\n
comment32.params=playerIndex
comment32.target=void\ makeAllPiecesMoveableAgainForPlayerIndex(int)
comment32.text=\r\n\ "Turns\ on"\ (makes\ moveable)\ all\ of\ pieces\ for\ the\ given\ player\ (specified\ by\ `playerIndex`)\ \r\n\ at\ the\ conclusion\ of\ that\ player's\ turn\r\n\ \r\n\ @param\ playerIndex\ \ \ the\ index\ of\ the\ player\ that\ is\ completing\ their\ turn\r\n
comment33.params=playerIndex
comment33.target=void\ updateGameStateAfterTurnForPlayerIndex(int)
comment33.text=\r\n\ Updates\ the\ game\ state\ (and\ checks\ for\ a\ possible\ win\ condition)\ after\ the\ player\r\n\ (specified\ by\ `playerIndex`)\ has\ just\ completed\ their\ turn\r\n\ \r\n\ @param\ playerIndex\ \ \ the\ index\ of\ the\ player\ that\ has\ just\ completed\ their\ turn\r\n
comment34.params=playerIndex
comment34.target=void\ updateGoalCountForPlayerIndex(int)
comment34.text=\r\n\ For\ the\ given\ playerIndex,\ checks\ to\ see\ how\ many\ of\ that\ player's\ pieces\ have\ been\ \r\n\ moved\ into\ that\ goal\ zone\ at\ the\ end\ of\ that\ player's\ movement\ path\r\n\ \r\n\ @param\ playerIndex\ \ \ the\ index\ of\ the\ player\ whose\ pieces\ are\ being\ checked\ to\ see\ if\ they're\ in\ the\ goal\ zone\r\n
comment35.params=headerMessage
comment35.target=void\ logCurrentStateOfGameBoard(java.lang.String)
comment35.text=\r\n\ A\ diagnostic\ method\ for\ logging\ the\ current\ state\ of\ the\ GameBoard\ to\ the\ console\r\n\ (Feel\ free\ to\ modify\ this\ however\ you\ like,\ and\ consider\ using\ System.out.println\ elsewhere\r\n\ \ in\ your\ code\ to\ display\ similar\ "diagnostic\ messages"\ or\ "debug\ messages")\r\n\ \r\n\ @param\ headerMessage\ \ \ \ \ a\ message\ to\ help\ the\ reader\ know\ when\ this\ method\ was\ actually\ called\ \r\n
comment4.params=
comment4.target=int\ getComputerScore()
comment5.params=score
comment5.target=void\ setComputerScore(int)
comment6.params=
comment6.target=int\ getDieRollValue()
comment7.params=dieRollValue
comment7.target=void\ setDieRollValue(int)
comment8.params=
comment8.target=int\ getState()
comment9.params=state
comment9.target=void\ setState(int)
numComments=36
